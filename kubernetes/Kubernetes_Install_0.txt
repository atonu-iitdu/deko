1) Hostname & /etc/hosts (all nodes)

Add a clean hosts file everywhere (masters, workers, lb1, lb2). Example:

cat <<'EOF' | sudo tee -a /etc/hosts
#Master Nodes
192.168.122.121  kubemaster01.atonu.com  kubemaster01
192.168.122.122  kubemaster02.atonu.com  kubemaster02
192.168.122.123  kubemaster03.atonu.com  kubemaster03

# Worker Nodes
192.168.122.131  kubeworker01.atonu.com  kubeworker01
192.168.122.132  kubeworker02.atonu.com  kubeworker02

#Loadbalancer 
192.168.122.101  lb1.atonu.com  lb1
192.168.122.102  lb2.atonu.com  lb2

# VIP:
192.168.122.100  kubeapi.atonu.com  kubeapi
EOF


2) Install NGINX + Keepalived on lb1 and lb2

(RHEL/Alma/Rocky family)
sudo dnf install -y nginx keepalived nginx-mod-stream
sudo systemctl enable nginx keepalived


sudo firewall-cmd --permanent --add-protocol=vrrp
sudo firewall-cmd --permanent --add-port=6443/tcp
sudo firewall-cmd --reload

# recommended so nginx can bind VIP even before it's assigned
echo "net.ipv4.ip_nonlocal_bind = 1" | sudo tee /etc/sysctl.d/99-kubeapi.conf
sudo sysctl --system


3) Configure NGINX (TCP load-balancing the API server)

Enable a stream section and a separate conf include.

/etc/nginx/nginx.conf (only the stream-related lines shownâ€”keep your existing http part intact):
cat <<'EOF' | sudo tee -a /etc/nginx/nginx.conf
# ... (keep your existing http{} if any)

stream {
    include /etc/nginx/stream.d/*.conf;
}
EOF

Comment out server configuration block from default nginx configuration file.

Create /etc/nginx/stream.d/kube-apiserver.conf:

mkdir /etc/nginx/stream.d
cat <<'EOF' | sudo tee -a /etc/nginx/stream.d/kube-apiserver.conf
upstream kube_apiserver {
    least_conn;
    server 192.168.122.121:6443 max_fails=3 fail_timeout=30s;
    server 192.168.122.122:6443 max_fails=3 fail_timeout=30s;
    server 192.168.122.123:6443 max_fails=3 fail_timeout=30s;
}

server {
    # Listen on BOTH VIP and local; nonlocal bind lets this work pre-VIP
    listen 0.0.0.0:6443;
    proxy_connect_timeout 1s;
    proxy_timeout 3600s;  # long-lived watch connections
    proxy_pass kube_apiserver;
}
EOF




Test & start:

sudo nginx -t
sudo systemctl restart nginx



4) Configure Keepalived for the VIP (lb1 and lb2)
Pick the correct NIC name (often ens3, eth0, enp1s0 on KVM/libvirt). Replace IFACE below with yours.

lb1 (/etc/keepalived/keepalived.conf)

mv /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak
cat <<'EOF' | sudo tee -a /etc/keepalived/keepalived.conf
global_defs {
  router_id LB1
}

vrrp_script chk_nginx {
  script "/usr/bin/pgrep -x nginx"
  interval 2
  weight -20
}

vrrp_instance VI_1 {
  state MASTER
  interface enp1s0
  virtual_router_id 51
  priority 150
  advert_int 1
  # If multicast VRRP isn't available on your network, uncomment unicast:
  # unicast_peer {
  #   192.168.122.102
  # }

  authentication {
    auth_type PASS
    auth_pass 42Secret!
  }

  virtual_ipaddress {
    192.168.122.100/24 dev enp1s0 label enp1s0:1
  }

  track_script {
    chk_nginx
  }
}
EOF


lb2 (/etc/keepalived/keepalived.conf)

mv /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak
cat <<'EOF' | sudo tee -a /etc/keepalived/keepalived.conf
global_defs {
  router_id LB2
}

vrrp_script chk_nginx {
  script "/usr/bin/pgrep -x nginx"
  interval 2
  weight -20
}

vrrp_instance VI_1 {
  state BACKUP
  interface enp1s0
  virtual_router_id 51
  priority 100
  advert_int 1
  # If using unicast, mirror peers:
  # unicast_peer {
  #   192.168.122.101
  # }

  authentication {
    auth_type PASS
    auth_pass 42Secret!
  }

  virtual_ipaddress {
    192.168.122.100/24 dev enp1s0 label enp1s0:1
  }

  track_script {
    chk_nginx
  }
}
EOF

Start/enable:

sudo systemctl enable --now keepalived